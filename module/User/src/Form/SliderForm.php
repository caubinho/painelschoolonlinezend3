<?phpnamespace User\Form;use User\Entity\Post;use Zend\Form\Element\File;use Zend\Form\Element\Hidden;use Zend\Form\Element\Select;use Zend\Form\Element\Text;use Zend\Form\Form;use Zend\InputFilter\InputFilter;use Zend\Validator\File\Extension;use Zend\Validator\NotEmpty;class SliderForm extends Form{    /**     * Constructor.     */    public function __construct()    {        // Define form name        parent::__construct('slider-form');        // Set POST method for this form        $this->setAttribute('method', 'post');        // Set binary content encoding        $this->setAttribute('enctype', 'multipart/form-data');        $this->setAttribute('class', 'form-horizontal form-label-left');        $this->addElements();        $this->addInputFilter();    }    /**     * This method adds elements to form (input fields and submit button).     */    protected function addElements()    {        // Add "email" field        $this->add([            'type'  => Hidden::class,            'name' => 'id',        ]);        // Add "email" field        $this->add([            'type'  => Text::class,            'name' => 'titulo',            'options' => [                'label' => 'Titulo',            ],        ]);        // Add "email" field        $this->add([            'type'  => Text::class,            'name' => 'url',            'options' => [                'label' => 'Url',            ],        ]);        $this->add([            'type'  => File::class,            'name' => 'file',            'attributes' => [                'id' => 'file'            ],            'options' => [                'label' => 'Imagem',            ],        ]);        // Add "status" field        $this->add([            'type'  => 'select',            'name' => 'status',            'attributes' => [                'id' => 'status'            ],            'options' => [                'label' => 'Status',                'value_options' => [                    '1' => 'Ativo',                    '2' => 'Inativo',                ]            ],        ]);        // Add the Submit button        $this->add([            'type'  => 'submit',            'name' => 'submit',            'attributes' => [                'value' => 'Salvar'            ],        ]);    }    /**     * This method creates input filter (used for form filtering/validation).     */    private function addInputFilter()    {        // Create main input filter        $inputFilter = new InputFilter();        $this->setInputFilter($inputFilter);        // Add input for "full_name" field        $inputFilter->add([            'name'     => 'titulo',            'required' => true,            'filters'  => [                ['name' => 'StringTrim'],            ],            'validators' => [                [                    'name' => NotEmpty::class,                    'options' => [                        'messages' => [                            NotEmpty::IS_EMPTY => 'Preencha este campo!'                        ]                    ]                ]            ],        ]);        // Add validation rules for the "file" field        $inputFilter->add([            'type'     => 'Zend\InputFilter\FileInput',            'name'     => 'file',            'validators' => [                [                    'name' => Extension::class,                    'options' => [                        'extensions' => 'gif',                        'jpeg',                        'jpg',                        'png',                        'mp4',                        'mp3',                        'mpeg',                        //'enableHeaderCheck' => true                        'case' => true,                        'message' => [                            Extension::FALSE_EXTENSION => 'ExtensÃ£o invÃ¡lida',                        ]                    ],                ],            ],            'filters'  => [                [                    'name' => 'FileRenameUpload',                    'options' => [                        'target'=> getcwd().'/public/media/spp_',                        'useUploadName'=>false,                        'useUploadExtension'=>true,                        'overwrite'=>false,                        'randomize'=>true                    ]                ]            ],        ]);    }}