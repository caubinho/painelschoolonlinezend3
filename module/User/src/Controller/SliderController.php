<?phpnamespace User\Controller;use User\Entity\Slider;use User\Form\SliderForm;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\ViewModel;/** * This is the Post controller class of the Blog application. * This controller is used for managing posts (adding/editing/viewing/deleting). */class SliderController extends AbstractActionController{    /**     * Entity manager.     * @var \Doctrine\ORM\EntityManager     */    private $entityManager;    /**     * @var \User\Service\SliderManager     */    private $manager;    /**     * @var \User\Entity\Slider     */    private $entity;    /**     * @var \User\Form\SliderForm     */    private $form;    private $route;    private $controller;    /**     * Constructor is used for injecting dependencies into the controller.     */    public function __construct($entityManager, $Manager)    {        $this->entityManager = $entityManager;        $this->manager = $Manager;        $this->route = "admin/default";        $this->controller = "banner";        $this->entity   = Slider::class;        $this->form     = new SliderForm();    }    /**     * This "admin" action displays the Manage Posts page. This page contains     * the list of posts with an ability to edit/delete any post.     */    public function indexAction()    {        // Get recent post        $dados = $this->entityManager->getRepository($this->entity)            ->findBy([], ['id'=>'DESC']);        // Render the view template        return new ViewModel([            'dados' => $dados,            'produtoManager' => $this->manager        ]);    }    public function newAction()    {    // Create the form.    $form = $this->form ;    // Check whether this post is a POST request.    if ($this->getRequest()->isPost()) {        //verifico se existe um file preenchido        $file = $this->getRequest()->getFiles()->toArray();        if ($file['file']['error'] == '0') {            $request = $this->getRequest();            $data = array_merge_recursive(                $request->getPost()->toArray(),                $request->getFiles()->toArray()            );            // Pass data to form            $form->setData($data);            if ($form->isValid()) {                // Get filtered and validated data                $data = $form->getData();                $arquivo = array_filter(explode(DIRECTORY_SEPARATOR, $data['file']['tmp_name']));                $dados = $request->getPost()->toArray();                $dados['file'] = array_pop($arquivo);//Nome do arquivo randômico                // Add user.                $dados = $this->manager->insert($dados);                $this->flashMessenger()->addSuccessMessage('Cadastro com sucesso!');                // Redirect to "view" page                return $this->redirect()->toRoute($this->route, ['controller' => $this->controller, 'action' => 'edit', 'id' => $dados->getId()]);            }        } else {            // Get POST data.            $data = $this->params()->fromPost();            // Fill form with data.            $form->setData($data);            $imageFilter = $form->getInputFilter()->get('file');            $imageFilter->setRequired(false);            if ($form->isValid()) {                // Get validated form data.                $data = $form->getData();                //print_r($data); die;                // Use post manager service to add new post to database.                $dados = $this->manager->insert($this->getRequest()->getPost()->toArray());                $this->flashMessenger()->addSuccessMessage('Cadastro com sucesso!');                return $this->redirect()->toRoute($this->route, ['controller' => $this->controller, 'action' => 'edit', 'id' => $dados->getId()]);            }        }    }            // Render the view template.            return new ViewModel([                'form' => $form            ]);        }    public function editAction()    {        $id = (int)$this->params()->fromRoute('id', -1);        if ($id<1) {            $this->getResponse()->setStatusCode(404);            return;        }        $user = $this->entityManager->getRepository($this->entity)            ->find($id);        if ($user == null) {            $this->getResponse()->setStatusCode(404);            return;        }        // Create user form        $form = $this->form;        // Check if user has submitted the form        if ($this->getRequest()->isPost()) {            $file = $this->getRequest()->getFiles()->toArray();            if($file['file']['error'] == '0'){                $request = $this->getRequest();                $data = array_merge_recursive(                    $request->getPost()->toArray(),                    $request->getFiles()->toArray()                );                // Pass data to form                $form->setData($data);                if($form->isValid()) {                    // Get filtered and validated data                    $data = $form->getData();                    $arquivo = array_filter(explode(DIRECTORY_SEPARATOR, $data['file']['tmp_name']));                    $dados = $this->getRequest()->getPost()->toArray();                    $dados['file'] = array_pop($arquivo);//Nome do arquivo randômico                    // Add user.                    $this->manager->update($dados);                    $this->flashMessenger()->addSuccessMessage('Alterado com sucesso!');                    return $this->redirect()->toRoute($this->route, ['controller' => $this->controller,'action'=>'edit', 'id'=> $user->getId()]);                }            }else {                // Fill in the form with POST data                $data = $this->params()->fromPost();                $form->setData($data);                //não existe imagem para enviar - tira a validaçao do file do form                $imageFilter = $form->getInputFilter()->get('file');                $imageFilter->setRequired(false);                // Validate form                if ($form->isValid()) {                    // Get filtered and validated data                    $data = $form->getData();                    $this->manager->update($this->getRequest()->getPost()->toArray());                    $this->flashMessenger()->addSuccessMessage('Alterado com sucesso!');                    // Redirect to "view" page                    return $this->redirect()->toRoute($this->route, ['controller' => $this->controller,'action'=>'edit', 'id'=> $user->getId()]);                }            }            //end verificaçao se tem imagem        } else {            $form->setData(array(                'id'                => $user->getId(),                'titulo'            => $user->getTitulo(),                'slug'              => $user->getSlug(),                'file'              => $user->getFile(),                'url'               => $user->getUrl(),                'status'            => $user->getStatus(),            ));        }        return new ViewModel(array(            'post' => $user,            'form' => $form        ));    }    public function deleteAction()    {        $id = (int)$this->params()->fromRoute('id', -1);        if ($id<1) {            $this->getResponse()->setStatusCode(404);            return;        }        $post = $this->entityManager->getRepository($this->entity)            ->find($id);        if ($post == null) {            $this->getResponse()->setStatusCode(404);            return;        }        $file =  $post->getFile();        if(empty($file)){            $this->manager->delete($post);        }else{            unlink('public/media/'.$file);            $this->manager->delete($post);        }        $this->flashMessenger()->addSuccessMessage('Excluido com sucesso!');        return $this->redirect()->toRoute($this->route, ['controller' => $this->controller]);    }}